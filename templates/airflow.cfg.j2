[core]
# The home folder for airflow, default is ~/airflow
airflow_home = {{ airflow_app_home }}

# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository
# This path must be absolute
dags_folder = {{ airflow_dags_folder }}

# The folder where airflow should store its log files
# This path must be absolute
base_log_folder = {{ airflow_logs_folder }}

# Logging level
logging_level = {{ airflow_logging_level }}
fab_logging_level = {{ airflow_fab_logging_level }}

# Logging class
# Specify the class that will specify the logging configuration
# This class has to be on the python classpath
# logging_config_class = my.path.default_local_settings.LOGGING_CONFIG
logging_config_class = {{ airflow_logging_config_class }}

# Log format
# we need to escape the curly braces by adding an additional curly brace
log_format = {{ airflow_log_format }}
simple_log_format = {{ airflow_simple_log_format }}

# Log filename format
# we need to escape the curly braces by adding an additional curly brace
log_filename_template = {{ airflow_log_filename_template }}
log_processor_filename_template = {{ airflow_log_processor_filename_template }}

# Hostname by providing a path to a callable, which will resolve the hostname
hostname_callable = {{ airflow_hostname_callable }}

# Default timezone in case supplied date times are naive
# can be utc (default), system, or any IANA timezone string (e.g. Europe/Amsterdam)
default_timezone = {{ airflow_default_timezone }}

# Airflow can store logs remotely in AWS S3 or Google Cloud Storage. Users
# must supply a remote location URL (starting with either 's3://...' or
# 'gs://...') and an Airflow connection id that provides access to the storage
# location.
remote_base_log_folder = {{ airflow_remote_base_log_folder }}
remote_log_conn_id = {{ airflow_remote_log_conn_id }}
# Use server-side encryption for logs stored in S3
encrypt_s3_logs = {{ airflow_encrypt_s3_logs }}
# DEPRECATED option for remote log storage, use remote_base_log_folder instead!
s3_log_folder = {{ airflow_s3_log_folder }}

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor
executor = {{ airflow_executor }}

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
sql_alchemy_conn = {{ airflow_database_conn }}

# The SqlAlchemy pool size is the maximum number of database connections
# in the pool.
sql_alchemy_pool_size = {{ airflow_database_pool_size }}

# The SqlAlchemy pool recycle is the number of seconds a connection
# can be idle in the pool before it is invalidated. This config does
# not apply to sqlite.
sql_alchemy_pool_recycle = {{ airflow_database_pool_recycle }}

# The amount of parallelism as a setting to the executor. This defines
# the max number of task instances that should run simultaneously
# on this airflow installation
parallelism = {{ airflow_parallelism }}

# The number of task instances allowed to run concurrently by the scheduler
dag_concurrency = {{ airflow_dag_concurrency }}

# Are DAGs paused by default at creation
dags_are_paused_at_creation = {{ airflow_dags_are_paused_at_creation }}

# When not using pools, tasks are run in the "default pool",
# whose size is guided by this config element
non_pooled_task_slot_count = {{ airflow_non_pooled_task_slot_count }}

# The maximum number of active DAG runs per DAG
max_active_runs_per_dag = {{ airflow_max_active_runs_per_dag }}

# Whether to load the examples that ship with Airflow. It's good to
# get started, but you probably want to set this to False in a production
# environment
load_examples = {{ airflow_load_examples }}

# Where your Airflow plugins are stored
plugins_folder = {{ airflow_plugins_folder }}

# Secret key to save connection passwords in the db
fernet_key = {{ airflow_fernet_key }}

# Whether to disable pickling dags
donot_pickle = {{ airflow_donot_pickle }}

# How long before timing out a python file import while filling the DagBag
dagbag_import_timeout = {{ airflow_dagbag_import_timeout }}

# The class to use for running task instances in a subprocess
task_runner = {{ airflow_task_runner }}

# If set, tasks without a `run_as_user` argument will be run with this user
# Can be used to de-elevate a sudo user running Airflow when executing tasks
default_impersonation = {{ airflow_default_impersonation }}

# What security module to use (for example kerberos):
security =

# Turn unit test mode on (overwrites many configuration options with test
# values at runtime)
unit_test_mode = {{ airflow_unit_test_mode }}

# Name of handler to read task instance logs.
# Default to use task handler.
task_log_reader = {{ airflow_task_log_reader }}

# Whether to enable pickling for xcom (note that this is insecure and allows for
# RCE exploits). This will be deprecated in Airflow 2.0 (be forced to False).
enable_xcom_pickling = {{ airflow_enable_xcom_pickling }}

# When a task is killed forcefully, this is the amount of time in seconds that
# it has to cleanup after it is sent a SIGTERM, before it is SIGKILLED
killed_task_cleanup_time = {{ airflow_killed_task_cleanup_time }}

# Whether to override params with dag_run.conf. If you pass some key-value pairs through `airflow backfill -c` or
# `airflow trigger_dag -c`, the key-value pairs will override the existing ones in params.
dag_run_conf_overrides_params = {{ airflow_dag_run_conf_overrides_params }}

[cli]
# In what way should the cli access the API. The LocalClient will use the
# database directly, while the json_client will use the api running on the
# webserver
api_client = {{ airflow_cli_api_client }}
endpoint_url = {{ airflow_cli_api_endpoint_url }}

[api]
# How to authenticate users of the API
auth_backend = {{ airflow_auth_backend }}

[lineage]
# what lineage backend to use
backend = {{ airflow_lineage_backend }}

[atlas]
sasl_enabled = {{ airflow_atlas_sasl_enabled }}
host = {{ airflow_atlas_host }}
port = {{ airflow_atlas_port }}
username = {{ airflow_atlas_username }}
password = {{ airflow_atlas_password }}

[operators]
# The default owner assigned to each new operator, unless
# provided explicitly or passed via `default_args`
default_owner = {{ airflow_operator_default_owner }}
default_cpus = {{ airflow_operator_default_cpus }}
default_ram = {{ airflow_operator_default_ram }}
default_disk = {{ airflow_operator_default_disk }}
default_gpus = {{ airflow_operator_default_gpus }}

[hive]
# Default mapreduce queue for HiveOperator tasks
default_hive_mapred_queue = {{ airflow_default_hive_mapred_queue }}

[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = {{ airflow_webserver_base_url }}

# The ip specified when starting the web server
web_server_host = {{ airflow_webserver_host }}

# The port on which to run the web server
web_server_port = {{Â airflow_webserver_port }}

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
web_server_ssl_cert = {{ airflow_webserver_ssl_cert }}
web_server_ssl_key = {{ airflow_webserver_ssl_key }}

# Number of seconds the webserver waits before killing gunicorn master that doesn't respond
web_server_master_timeout = {{ airflow_webserver_master_timeout }}

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = {{ airflow_webserver_worker_timeout }}

# Number of workers to refresh at a time. When set to 0, worker refresh is
# disabled. When nonzero, airflow periodically refreshes webserver workers by
# bringing up new ones and killing old ones.
worker_refresh_batch_size = {{ airflow_webserver_worker_refresh_batch_size }}

# Number of seconds to wait before refreshing a batch of workers.
worker_refresh_interval = {{ airflow_webserver_worker_refresh_interval }}

# Secret key used to run your flask app
secret_key = {{ airflow_webserver_secret_key }}

# Number of workers to run the Gunicorn web server
workers = {{ airflow_webserver_workers }}

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = {{ airflow_webserver_worker_class }}

# Log files for the gunicorn webserver. '-' means log to stderr.
access_logfile = {{ airflow_logs_folder }}/gunicorn-access.log
error_logfile = {{ airflow_logs_folder }}/gunicorn-error.log

# Expose the configuration file in the web server
expose_config = {{ airflow_webserver_expose_config }}

# Set to true to turn on authentication:
# http://pythonhosted.org/airflow/security.html#web-authentication
authenticate = {{ airflow_webserver_authenticate }}
{% if airflow_webserver_auth_backend %}
auth_backend = {{ airflow_webserver_auth_backend }}
{% endif %}

# Filter the list of dags by owner name (requires authentication to be enabled)
filter_by_owner = {{ airflow_webserver_filter_by_owner }}

# Filtering mode. Choices include user (default) and ldapgroup.
# Ldap group filtering requires using the ldap backend
#
# Note that the ldap server needs the "memberOf" overlay to be set up
# in order to user the ldapgroup mode.
owner_mode = {{ airflow_webserver_owner_mode }}

# Default DAG orientation. Valid values are:
# LR (Left->Right), TB (Top->Bottom), RL (Right->Left), BT (Bottom->Top)
dag_orientation = {{ airflow_webserver_dag_orientation }}

# Puts the webserver in demonstration mode; blurs the names of Operators for
# privacy.
demo_mode = {{ airflow_webserver_demo_mode }}

# The amount of time (in secs) webserver will wait for initial handshake
# while fetching logs from other worker machine
log_fetch_timeout_sec = {{ airflow_webserver_log_fetch_timeout_sec }}

# By default, the webserver shows paused DAGs. Flip this to hide paused
# DAGs by default
hide_paused_dags_by_default = {{ airflow_webserver_hide_paused_dags_by_default }}

# Consistent page size across all listing views in the UI
page_size = {{ airflow_webserver_page_size }}

# Use FAB-based webserver with RBAC feature
rbac = {{ airflow_webserver_rbac }}

# Define the color of navigation bar
navbar_color = {{ airflow_webserver_navbar_color }}

# Default dagrun to show in UI
default_dag_run_display_number = {{ airflow_webserver_default_dag_run_display_number }}

[email]
email_backend = {{ airflow_email_backend }}

[smtp]
# If you want airflow to send emails on retries, failure, and you want to use
# the airflow.utils.email.send_email_smtp function, you have to configure an
# smtp server here
smtp_host = {{Â airflow_smtp_host }}
smtp_starttls = {{Â airflow_smtp_starttls }}
smtp_ssl = {{Â airflow_smtp_ssl }}
smtp_port = {{Â airflow_smtp_port }}
smtp_mail_from = {{Â airflow_smtp_mail_from }}
{% if airflow_smtp_user %}
smtp_user = {{ airflow_smtp_user }}
{% endif %}
{% if airflow_smtp_passwd %}
smtp_password = {{ airflow_smtp_passwd }}
{% endif %}

{% if airflow_executor == "CeleryExecutor" %}
[celery]
# This section only applies if you are using the CeleryExecutor in
# [core] section above

# The app name that will be used by celery
celery_app_name = {{ airflow_celery_app_name }}

# The concurrency that will be used when starting workers with the
# "airflow worker" command. This defines the number of task instances that
# a worker will take, so size up your workers based on the resources on
# your worker box and the nature of your tasks
worker_concurrency = {{ airflow_celery_concurrency }}

# When you start an airflow worker, airflow starts a tiny web server
# subprocess to serve the workers local log files to the airflow main
# web server, who then builds pages and sends them to users. This defines
# the port on which the logs are served. It needs to be unused, and open
# visible from the main web server to connect into the workers.
worker_log_server_port = {{ airflow_celery_worker_log_server_port }}

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more
# information.
broker_url = {{ airflow_celery_broker_url }}

# Another key Celery setting
result_backend = {{ airflow_celery_result_backend }}

# Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
# it `airflow flower`. This defines the IP that Celery Flower runs on
flower_host = {{ airflow_flower_host }}

# This defines the port that Celery Flower runs on
flower_port = {{ airflow_flower_port }}

# Default queue that tasks get assigned to and that worker listen on.
default_queue = {{ airflow_celery_default_queue }}

# Import path for celery configuration options
celery_config_options = airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG

# In case of using SSL
ssl_active = {{ airflow_celery_ssl_active }}
ssl_key = {{ airflow_celery_ssl_key }}
ssl_cert = {{ airflow_celery_ssl_cert }}
ssl_cacert = {{ airflow_celery_ssl_cacert }}

[celery_broker_transport_options]
# This section is for specifying options which can be passed to the
# underlying celery broker transport.  See:
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-broker_transport_options

# The visibility timeout defines the number of seconds to wait for the worker
# to acknowledge the task before the message is redelivered to another worker.
# Make sure to increase the visibility timeout to match the time of the longest
# ETA you're planning to use.
#
# visibility_timeout is only supported for Redis and SQS celery brokers.
# See:
#   http://docs.celeryproject.org/en/master/userguide/configuration.html#std:setting-broker_transport_options
#
#visibility_timeout = 21600
{% elif airflow_executor == "DaskExecutor" %}
[dask]
# The IP address and port of the Dask cluster's scheduler.
cluster_address = {{ airflow_dask_cluster_address }}
# TLS/ SSL settings to access a secured Dask scheduler.
tls_ca = {{ airflow_dask_tls_ca }}
tls_cert = {{ airflow_dask_tls_cert }}
tls_key = {{ airflow_dask_tls_key }}

{% endif %}
[scheduler]
# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
job_heartbeat_sec = {{ airflow_scheduler_job_heartbeat_sec }}

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
scheduler_heartbeat_sec = {{ airflow_scheduler_heartbeat_sec }}

# after how much time should the scheduler terminate in seconds
# -1 indicates to run continuously (see also num_runs)
run_duration = {{ airflow_scheduler_run_duration }}

# after how much time a new DAGs should be picked up from the filesystem
min_file_process_interval = {{ airflow_scheduler_min_file_process_interval }}

# How many seconds to wait between file-parsing loops to prevent the logs from being spammed.
min_file_parsing_loop_time = {{ airflow_scheduler_min_file_parsing_loop_time }}

dag_dir_list_interval = {{ airflow_scheduler_dag_dir_list_interval }}

# How often should stats be printed to the logs
print_stats_interval = {{ airflow_scheduler_print_stats_interval }}

child_process_log_directory = {{ airflow_child_process_log_folder }}

# Local task jobs periodically heartbeat to the DB. If the job has
# not heartbeat in this many seconds, the scheduler will mark the
# associated task instance as failed and will re-schedule the task.
scheduler_zombie_task_threshold = {{ airflow_scheduler_zombie_task_threshold }}

# Turn off scheduler catchup by setting this to False.
# Default behavior is unchanged and
# Command Line Backfills still work, but the scheduler
# will not do scheduler catchup if this is False,
# however it can be set on a per DAG basis in the
# DAG definition (catchup)
catchup_by_default = {{ airflow_scheduler_catchup_by_default }}

# This changes the batch size of queries in the scheduling main loop.
# If this is too high, SQL query performance may be impacted by one
# or more of the following:
#  - reversion to full table scan
#  - complexity of query predicate
#  - excessive locking
#
# Additionally, you may hit the maximum allowable query length for your db.
#
# Set this to 0 for no limit (not advised)
max_tis_per_query = {{ airflow_scheduler_max_tis_per_query }}

# Statsd (https://github.com/etsy/statsd) integration settings
statsd_on = {{Â airflow_statsd_on }}
statsd_host = {{ airflow_statsd_host }}
statsd_port = {{ airflow_statsd_port }}
statsd_prefix = {{ airflow_statsd_prefix }}

# The scheduler can run multiple threads in parallel to schedule dags.
# This defines how many threads will run. However airflow will never
# use more threads than the amount of cpu cores available.
max_threads = {{ airflow_scheduler_max_threads }}

authenticate = {{ airflow_scheduler_authenticate }}

[mesos]
# Mesos master address which MesosExecutor will connect to.
master = {{ airflow_mesos_master_host }}

# The framework name which Airflow scheduler will register itself as on mesos
framework_name = {{ airflow_mesos_framework_name }}

# Number of cpu cores required for running one task instance using
# 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
# command on a mesos slave
task_cpu = {{ airflow_mesos_task_cpu }}

# Memory in MB required for running one task instance using
# 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
# command on a mesos slave
task_memory = {{ airflow_mesos_task_memory }}

# Enable framework checkpointing for mesos
# See http://mesos.apache.org/documentation/latest/slave-recovery/
checkpoint = {{ airflow_mesos_checkpoint }}

# Failover timeout in milliseconds.
# When checkpointing is enabled and this option is set, Mesos waits
# until the configured timeout for
# the MesosExecutor framework to re-register after a failover. Mesos
# shuts down running tasks if the
# MesosExecutor framework fails to re-register within this timeframe.
# failover_timeout = 604800

# Enable framework authentication for mesos
# See http://mesos.apache.org/documentation/latest/configuration/
authenticate = {{ airflow_mesos_authenticate }}

# Mesos credentials, if authentication is enabled
# default_principal = admin
# default_secret = admin

[kerberos]
ccache = {{ airflow_kerberos_ccache }}
# gets augmented with fqdn
principal = {{ airflow_kerberos_principal }}
reinit_frequency = {{ airflow_kerberos_reinit_frequency }}
kinit_path = {{ airflow_kerberos_kinit_path }}
keytab = {{ airflow_kerberos_keytab }}

[github_enterprise]
api_rev = {{ airflow_github_enterprise_api_rev }}

[admin]
# UI to hide sensitive variable fields when set to True
hide_sensitive_variable_fields = {{ airflow_admin_hide_sensitive_variable_fields }}

{% if airflow_webserver_auth_backend == "airflow.contrib.auth.backends.ldap_auth" %}
[ldap]
# set a connection without encryption: uri = ldap://<your.ldap.server>:<port>
uri = {{ airflow_ldap_uri }}
user_filter = {{ airflow_ldap_user_filter }}
# in case of Active Directory you would use: user_name_attr = sAMAccountName
user_name_attr = {{ airflow_ldap_user_name_attr }}
{% if airflow_ldap_superuser_filter %}
superuser_filter = {{ airflow_ldap_superuser_filter }}
{% endif %}
{% if airflow_ldap_data_profiler_filter %}
data_profiler_filter = {{ airflow_ldap_data_profiler_filter }}
{% endif %}
bind_user = {{ airflow_ldap_bind_user }}
bind_password = {{ airflow_ldap_bind_password }}
basedn = {{ airflow_ldap_basedn }}
cacert = {{ airflow_ldap_cacert }}
# Set search_scope to one of them:  BASE, LEVEL , SUBTREE
# Set search_scope to SUBTREE if using Active Directory, and not specifying an Organizational Unit
search_scope = {{ airflow_ldap_search_scope }}
{% endif %}

[elasticsearch]
elasticsearch_host = {{ airflow_elasticsearch_host }}
# we need to escape the curly braces by adding an additional curly brace
elasticsearch_log_id_template = {{ airflow_elasticsearch_log_id_template }}
elasticsearch_end_of_log_mark = {{ airflow_elasticsearch_end_of_log_mark }}

[kubernetes]
# The repository and tag of the Kubernetes Image for the Worker to Run
worker_container_repository = {{ airflow_kubernetes_worker_container_repository }}
worker_container_tag = {{ airflow_kubernetes_worker_container_tag }}

# If True (default), worker pods will be deleted upon termination
delete_worker_pods =  {{ airflow_kubernetes_delete_worker_pods }}

# The Kubernetes namespace where airflow workers should be created. Defaults to `default`
namespace =  {{ airflow_kubernetes_namespace }}

# The name of the Kubernetes ConfigMap Containing the Airflow Configuration (this file)
airflow_configmap = {{ airflow_kubernetes_airflow_configmap }}

# For either git sync or volume mounted DAGs, the worker will look in this subpath for DAGs
dags_volume_subpath = {{ airflow_kubernetes_dags_volume_subpath }}

# For DAGs mounted via a volume claim (mutually exclusive with volume claim)
dags_volume_claim = {{ airflow_kubernetes_dags_volume_claim }}

# For volume mounted logs, the worker will look in this subpath for logs
logs_volume_subpath = {{ airflow_kubernetes_logs_volume_subpath }}

# A shared volume claim for the logs
logs_volume_claim = {{ airflow_kubernetes_logs_volume_claim }}

# Git credentials and repository for DAGs mounted via Git (mutually exclusive with volume claim)
git_repo = {{ airflow_kubernetes_git_repo }}
git_branch = {{ airflow_kubernetes_git_branch }}
git_user = {{ airflow_kubernetes_git_user }}
git_password = {{ airflow_kubernetes_git_password }}
git_subpath = {{ airflow_kubernetes_git_subpath }}

# For cloning DAGs from git repositories into volumes: https://github.com/kubernetes/git-sync
git_sync_container_repository = {{ airflow_kubernetes_git_sync_container_repository }}
git_sync_container_tag = {{ airflow_kubernetes_git_sync_container_tag }}
git_sync_init_container_name = {{ airflow_kubernetes_git_sync_init_container_name }}

# The name of the Kubernetes service account to be associated with airflow workers, if any.
# Service accounts are required for workers that require access to secrets or cluster resources.
# See the Kubernetes RBAC documentation for more:
#   https://kubernetes.io/docs/admin/authorization/rbac/
worker_service_account_name = {{ airflow_kubernetes_worker_service_account_name }}

# Any image pull secrets to be given to worker pods, If more than one secret is
# required, provide a comma separated list: secret_a,secret_b
image_pull_secrets = {{ airflow_kubernetes_image_pull_secrets }}

# GCP Service Account Keys to be provided to tasks run on Kubernetes Executors
# Should be supplied in the format: key-name-1:key-path-1,key-name-2:key-path-2
gcp_service_account_keys = {{ airflow_kubernetes_gcp_service_account_keys }}

# Use the service account kubernetes gives to pods to connect to kubernetes cluster.
# It's intended for clients that expect to be running inside a pod running on kubernetes.
# It will raise an exception if called from a process not running in a kubernetes environment.
in_cluster = {{ airflow_kubernetes_in_cluster }}

[kubernetes_secrets]
# The scheduler mounts the following secrets into your workers as they are launched by the
# scheduler. You may define as many secrets as needed and the kubernetes launcher will parse the
# defined secrets and mount them as secret environment variables in the launched workers.
# Secrets in this section are defined as follows
#     <environment_variable_mount> = <kubernetes_secret_object>:<kubernetes_secret_key>
#
# For example if you wanted to mount a kubernetes secret key named `postgres_password` from the
# kubernetes secret object `airflow-secret` as the environment variable `POSTGRES_PASSWORD` into
# your workers you would follow the following format:
#     POSTGRES_PASSWORD = airflow-secret:postgres_credentials
#
# Additionally you may override worker airflow settings with the AIRFLOW__<SECTION>__<KEY>
