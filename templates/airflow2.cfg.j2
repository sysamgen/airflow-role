[core]
# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository. This path must be absolute.
dags_folder = {{ airflow_dags_folder }}

# Hostname by providing a path to a callable, which will resolve the hostname.
# The format is "package.function".
#
# For example, default value "socket.getfqdn" means that result from getfqdn() of "socket"
# package will be used as hostname.
#
# No argument should be required in the function specified.
# If using IP address as hostname is preferred, use value ``airflow.utils.net.get_host_ip_address``
hostname_callable = {{ airflow_hostname_callable_v2 }}

# Default timezone in case supplied date times are naive
# can be utc (default), system, or any IANA timezone string (e.g. Europe/Amsterdam)
default_timezone = {{ airflow_default_timezone }}

# The executor class that airflow should use. Choices include
# ``SequentialExecutor``, ``LocalExecutor``, ``CeleryExecutor``, ``DaskExecutor``,
# ``KubernetesExecutor``, ``CeleryKubernetesExecutor`` or the
# full import path to the class when using a custom executor.
executor = {{ airflow_executor }}

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engines.
# More information here:
# http://airflow.apache.org/docs/apache-airflow/stable/howto/set-up-database.html#database-uri
sql_alchemy_conn = {{ airflow_database_conn }}

# The encoding for the databases
sql_engine_encoding = {{ airflow_database_engine_encoding }}

# Collation for ``dag_id``, ``task_id``, ``key`` columns in case they have different encoding.
# This is particularly useful in case of mysql with utf8mb4 encoding because
# primary keys for XCom table has too big size and ``sql_engine_collation_for_ids`` should
# be set to ``utf8mb3_general_ci``.
# sql_engine_collation_for_ids =
{% if airflow_database_engine_collation_for_ids %}sql_engine_collation_for_ids = {{ airflow_database_engine_collation_for_ids }}{% endif %}

# If SqlAlchemy should pool database connections.
sql_alchemy_pool_enabled = {{ airflow_database_pool_enabled }}

# The SqlAlchemy pool size is the maximum number of database connections
# in the pool. 0 indicates no limit.
sql_alchemy_pool_size = {{ airflow_database_pool_size }}

# The maximum overflow size of the pool.
# When the number of checked-out connections reaches the size set in pool_size,
# additional connections will be returned up to this limit.
# When those additional connections are returned to the pool, they are disconnected and discarded.
# It follows then that the total number of simultaneous connections the pool will allow
# is pool_size + max_overflow,
# and the total number of "sleeping" connections the pool will allow is pool_size.
# max_overflow can be set to ``-1`` to indicate no overflow limit;
# no limit will be placed on the total number of concurrent connections. Defaults to ``10``.
sql_alchemy_max_overflow = {{ airflow_database_max_overflow }}

# The SqlAlchemy pool recycle is the number of seconds a connection
# can be idle in the pool before it is invalidated. This config does
# not apply to sqlite. If the number of DB connections is ever exceeded,
# a lower config value will allow the system to recover faster.
airflow_database_pool_recycle = {{ airflow_database_pool_recycle }}

# Check connection at the start of each connection pool checkout.
# Typically, this is a simple statement like "SELECT 1".
# More information here:
# https://docs.sqlalchemy.org/en/13/core/pooling.html#disconnect-handling-pessimistic
sql_alchemy_pool_pre_ping = {{ airflow_database_pool_pre_ping }}

# The schema to use for the metadata database.
# SqlAlchemy supports databases with the concept of multiple schemas.
sql_alchemy_schema = {{ airflow_database_schema }}

# Import path for connect args in SqlAlchemy. Defaults to an empty dict.
# This is useful when you want to configure db engine args that SqlAlchemy won't parse
# in connection string.
# See https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine.params.connect_args
# sql_alchemy_connect_args =
{% if airflow_database_connect_args %}sql_alchemy_connect_args = {{ airflow_database_connect_args }}{% endif %}

# This defines the maximum number of task instances that can run concurrently in Airflow
# regardless of scheduler count and worker count. Generally, this value is reflective of
# the number of task instances with the running state in the metadata database.
parallelism = {{ airflow_parallelism }}

# The maximum number of task instances allowed to run concurrently in each DAG. To calculate
# the number of tasks that is running concurrently for a DAG, add up the number of running
# tasks for all DAG runs of the DAG. This is configurable at the DAG level with ``concurrency``,
# which is defaulted as ``dag_concurrency``.
dag_concurrency = {{ airflow_dag_concurrency }}

# Are DAGs paused by default at creation
dags_are_paused_at_creation = {{ airflow_dags_are_paused_at_creation }}

# The maximum number of active DAG runs per DAG. The scheduler will not create more DAG runs
# if it reaches the limit. This is configurable at the DAG level with ``max_active_runs``,
# which is defaulted as ``max_active_runs_per_dag``.
max_active_runs_per_dag = {{ airflow_max_active_runs_per_dag }}

# Whether to load the DAG examples that ship with Airflow. It's good to
# get started, but you probably want to set this to ``False`` in a production
# environment
load_examples = {{ airflow_load_examples }}

# Whether to load the default connections that ship with Airflow. It's good to
# get started, but you probably want to set this to ``False`` in a production
# environment
load_default_connections = {{ airflow_load_default_connections }}

# Path to the folder containing Airflow plugins
plugins_folder = {{ airflow_plugins_folder }}

# Should tasks be executed via forking of the parent process ("False",
# the speedier option) or by spawning a new python process ("True" slow,
# but means plugin changes picked up by tasks straight away)
execute_tasks_new_python_interpreter = {{ airflow_execute_tasks_new_python_interpreter }}

# Secret key to save connection passwords in the db
fernet_key = {{ airflow_fernet_key }}

# Whether to disable pickling dags
donot_pickle = {{ airflow_donot_pickle }}

# How long before timing out a python file import
dagbag_import_timeout = {{ airflow_dagbag_import_timeout }}

# Should a traceback be shown in the UI for dagbag import errors,
# instead of just the exception message
dagbag_import_error_tracebacks = {{ airflow_dagbag_import_error_tracebacks }}

# If tracebacks are shown, how many entries from the traceback should be shown
dagbag_import_error_traceback_depth = {{ airflow_dagbag_import_error_traceback_depth }}

# How long before timing out a DagFileProcessor, which processes a dag file
dag_file_processor_timeout = {{ airflow_dag_file_processor_timeout }}

# The class to use for running task instances in a subprocess.
# Choices include StandardTaskRunner, CgroupTaskRunner or the full import path to the class
# when using a custom task runner.
task_runner = {{ airflow_task_runner }}

# If set, tasks without a ``run_as_user`` argument will be run with this user
# Can be used to de-elevate a sudo user running Airflow when executing tasks
default_impersonation = {{ airflow_default_impersonation }}

# What security module to use (for example kerberos)
security = {{ airflow_security }}

# Turn unit test mode on (overwrites many configuration options with test
# values at runtime)
unit_test_mode = {{ airflow_unit_test_mode }}

# Whether to enable pickling for xcom (note that this is insecure and allows for
# RCE exploits).
enable_xcom_pickling = {{ airflow_enable_xcom_pickling }}

# When a task is killed forcefully, this is the amount of time in seconds that
# it has to cleanup after it is sent a SIGTERM, before it is SIGKILLED
killed_task_cleanup_time = {{ airflow_killed_task_cleanup_time }}

# Whether to override params with dag_run.conf. If you pass some key-value pairs
# through ``airflow dags backfill -c`` or
# ``airflow dags trigger -c``, the key-value pairs will override the existing ones in params.
dag_run_conf_overrides_params = {{ airflow_dag_run_conf_overrides_params }}

# When discovering DAGs, ignore any files that don't contain the strings ``DAG`` and ``airflow``.
dag_discovery_safe_mode = {{ airflow_dag_discovery_safe_mode }}

# The number of retries each task is going to have by default. Can be overridden at dag or task level.
default_task_retries = {{ airflow_default_task_retries }}

# Updating serialized DAG can not be faster than a minimum interval to reduce database write rate.
min_serialized_dag_update_interval = {{ airflow_min_serialized_dag_update_interval }}

# Fetching serialized DAG can not be faster than a minimum interval to reduce database
# read rate. This config controls when your DAGs are updated in the Webserver
min_serialized_dag_fetch_interval = {{ airflow_min_serialized_dag_fetch_interval }}

# Whether to persist DAG files code in DB.
# If set to True, Webserver reads file contents from DB instead of
# trying to access files in a DAG folder.
# (Default is ``True``)
# Example: store_dag_code = True
{% if airflow_store_dag_code is defined %}store_dag_code = {{ airflow_store_dag_code }}{% endif %}

# Maximum number of Rendered Task Instance Fields (Template Fields) per task to store
# in the Database.
# All the template_fields for each of Task Instance are stored in the Database.
# Keeping this number small may cause an error when you try to view ``Rendered`` tab in
# TaskInstance view for older tasks.
max_num_rendered_ti_fields_per_task = {{ airflow_max_num_rendered_ti_fields_per_task }}

# On each dagrun check against defined SLAs
check_slas = {{ airflow_check_slas }}

# Path to custom XCom class that will be used to store and resolve operators results
# Example: xcom_backend = path.to.CustomXCom
xcom_backend = {{ airflow_xcom_backend }}

# By default Airflow plugins are lazily-loaded (only loaded when required). Set it to ``False``,
# if you want to load plugins whenever 'airflow' is invoked via cli or loaded from module.
lazy_load_plugins = {{ airflow_lazy_load_plugins }}

# By default Airflow providers are lazily-discovered (discovery and imports happen only when required).
# Set it to False, if you want to discover providers whenever 'airflow' is invoked via cli or
# loaded from module.
lazy_discover_providers = {{ airflow_lazy_discover_providers }}

# Number of times the code should be retried in case of DB Operational Errors.
# Not all transactions will be retried as it can cause undesired state.
# Currently it is only used in ``DagFileProcessor.process_file`` to retry ``dagbag.sync_to_db``.
max_db_retries = {{ airflow_max_db_retries }}

# Hide sensitive Variables or Connection extra json keys from UI and task logs when set to True
#
# (Connection passwords are always hidden in logs)
hide_sensitive_var_conn_fields = {{ airflow_hide_sensitive_var_conn_fields }}

# A comma-separated list of extra sensitive keywords to look for in variables names or connection's
# extra JSON.
sensitive_var_conn_names = {{ airflow_sensitive_var_conn_names }}

[logging]
# The folder where airflow should store its log files
# This path must be absolute
base_log_folder = {{ airflow_logs_folder }}

# Airflow can store logs remotely in AWS S3, Google Cloud Storage or Elastic Search.
# Set this to True if you want to enable remote logging.
remote_logging = {{ airflow_remote_logging }}

# Users must supply an Airflow connection id that provides access to the storage
# location.
remote_log_conn_id = {{ airflow_remote_log_conn_id }}

# Path to Google Credential JSON file. If omitted, authorization based on `the Application Default
# Credentials
# <https://cloud.google.com/docs/authentication/production#finding_credentials_automatically>`__ will
# be used.
google_key_path = {{ airflow_google_key_path }}

# Storage bucket URL for remote logging
# S3 buckets should start with "s3://"
# Cloudwatch log groups should start with "cloudwatch://"
# GCS buckets should start with "gs://"
# WASB buckets should start with "wasb" just to help Airflow select correct handler
# Stackdriver logs should start with "stackdriver://"
remote_base_log_folder = {{ airflow_remote_base_log_folder }}

# Use server-side encryption for logs stored in S3
encrypt_s3_logs = {{ airflow_encrypt_s3_logs }}

# Logging level
# Supported values: ``CRITICAL``, ``ERROR``, ``WARNING``, ``INFO``, ``DEBUG``.
logging_level = {{ airflow_logging_level }}

# Logging level for Flask-appbuilder UI
# Supported values: ``CRITICAL``, ``ERROR``, ``WARNING``, ``INFO``, ``DEBUG``.
fab_logging_level = {{ airflow_fab_logging_level }}

# Logging class
# Specify the class that will specify the logging configuration
# This class has to be on the python classpath
# Example: logging_config_class = my.path.default_local_settings.LOGGING_CONFIG
logging_config_class = {{ airflow_logging_config_class }}

# Flag to enable/disable Colored logs in Console
# Colour the logs when the controlling terminal is a TTY.
colored_console_log = {{ airflow_colored_console_log }}

# Log format for when Colored logs is enabled
colored_log_format = {{ airflow_colored_log_format }}
colored_formatter_class = {{ airflow_colored_formatter_class }}

# Format of Log line
log_format = {{ airflow_log_format }}
simple_log_format = {{ airflow_simple_log_format }}

# Specify prefix pattern like mentioned below with stream handler TaskHandlerWithCustomFormatter
task_log_prefix_template = {{ airflow_task_log_prefix_template }}

# Formatting for how airflow generates file names/paths for each task run.
log_filename_template = {{ airflow_log_filename_template }}

# Formatting for how airflow generates file names for log
log_processor_filename_template = {{ airflow_log_processor_filename_template }}

# full path of dag_processor_manager logfile
dag_processor_manager_log_location = {{ airflow_dag_processor_manager_log_location }}

# Name of handler to read task instance logs.
# Defaults to use ``task`` handler.
task_log_reader = {{ airflow_task_log_reader }}

# A comma\-separated list of third-party logger names that will be configured to print messages to
# consoles\.
# Example: extra_loggers = connexion,sqlalchemy
extra_loggers = {{ airflow_extra_loggers }}

[metrics]

# StatsD (https://github.com/etsy/statsd) integration settings.
# Enables sending metrics to StatsD.
statsd_on = {{ airflow_statsd_on }}
statsd_host = {{ airflow_statsd_host }}
statsd_port = {{ airflow_statsd_port }}
statsd_prefix = {{ airflow_statsd_prefix }}

# If you want to avoid sending all the available metrics to StatsD,
# you can configure an allow list of prefixes (comma separated) to send only the metrics that
# start with the elements of the list (e.g: "scheduler,executor,dagrun")
statsd_allow_list = {{ airflow_statsd_allow_list }}

# A function that validate the statsd stat name, apply changes to the stat name if necessary and return
# the transformed stat name.
#
# The function should have the following signature:
# def func_name(stat_name: str) -> str:
stat_name_handler = {{ airflow_stat_name_handler }}

# To enable datadog integration to send airflow metrics.
statsd_datadog_enabled = {{ airflow_statsd_datadog_enabled }}

# List of datadog tags attached to all metrics(e.g: key1:value1,key2:value2)
statsd_datadog_tags = {{ airflow_statsd_datadog_tags }}

# If you want to utilise your own custom Statsd client set the relevant
# module path below.
# Note: The module path must exist on your PYTHONPATH for Airflow to pick it up
{% if airflow_statsd_custom_client_path %}statsd_custom_client_path = {{ airflow_statsd_custom_client_path }}{% endif %}

[secrets]
# Full class name of secrets backend to enable (will precede env vars and metastore in search path)
# Example: backend = airflow.providers.amazon.aws.secrets.systems_manager.SystemsManagerParameterStoreBackend
backend = {{ airflow_secrets_backend }}

# The backend_kwargs param is loaded into a dictionary and passed to __init__ of secrets backend class.
# See documentation for the secrets backend you are using. JSON is expected.
# Example for AWS Systems Manager ParameterStore:
backend_kwargs = {{ airflow_backend_kwargs }}

[cli]
# In what way should the cli access the API. The LocalClient will use the
# database directly, while the json_client will use the api running on the
# webserver
api_client = {{ airflow_cli_api_client }}

# If you set web_server_url_prefix, do NOT forget to append it here, ex:
# ``endpoint_url = http://localhost:8080/myroot``
# So api will look like: ``http://localhost:8080/myroot/api/experimental/...``
endpoint_url = {{ airflow_cli_api_endpoint_url }}

[debug]
# Used only with ``DebugExecutor``. If set to ``True`` DAG will fail with first
# failed task. Helpful for debugging purposes.
fail_fast = {{ airflow_fail_fast }}

[api]
# Enables the deprecated experimental API. Please note that these APIs do not have access control.
# The authenticated user has full access.
#
# .. warning::
#
#   This `Experimental REST API <https://airflow.readthedocs.io/en/latest/rest-api-ref.html>`__ is
#   deprecated since version 2.0. Please consider using
#   `the Stable REST API <https://airflow.readthedocs.io/en/latest/stable-rest-api-ref.html>`__.
#   For more information on migration, see
#   `UPDATING.md <https://github.com/apache/airflow/blob/main/UPDATING.md>`_
enable_experimental_api = {{ airflow_enable_experimental_api }}

# How to authenticate users of the API. See
# https://airflow.apache.org/docs/apache-airflow/stable/security.html for possible values.
# ("airflow.api.auth.backend.default" allows all requests for historic reasons)
auth_backend = {{ airflow_auth_backend }}

# Used to set the maximum page limit for API requests
maximum_page_limit = {{ airflow_maximum_page_limit }}

# Used to set the default page limit when limit is zero. A default limit
# of 100 is set on OpenApi spec. However, this particular default limit
# only work when limit is set equal to zero(0) from API requests.
# If no limit is supplied, the OpenApi spec default is used.
fallback_page_limit = {{ airflow_fallback_page_limit }}

# The intended audience for JWT token credentials used for authorization. This value must match on the client and server sides. If empty, audience will not be tested.
# Example: google_oauth2_audience = project-id-random-value.apps.googleusercontent.com
google_oauth2_audience = {{ airflow_google_oauth2_audience }}

# Path to Google Cloud Service Account key file (JSON). If omitted, authorization based on
# `the Application Default Credentials
# <https://cloud.google.com/docs/authentication/production#finding_credentials_automatically>`__ will
# be used.
# Example: google_key_path = /files/service-account-json
google_key_path = {{ airflow_google_key_path}}

# Used in response to a preflight request to indicate which HTTP
# headers can be used when making the actual request. This header is
# the server side response to the browser's
# Access-Control-Request-Headers header.
access_control_allow_headers = {{ airflow_access_control_allow_headers }}

# Specifies the method or methods allowed when accessing the resource.
access_control_allow_methods = {{ airflow_access_control_allow_methods }}

# Indicates whether the response can be shared with requesting code from the given origin.
access_control_allow_origin = {{ airflow_access_control_allow_origin }}

[lineage]
# what lineage backend to use
backend = {{ airflow_lineage_backend }}

[atlas]
sasl_enabled = {{ airflow_atlas_sasl_enabled }}
host = {{ airflow_atlas_host }}
port = {{ airflow_atlas_port }}
username = {{ airflow_atlas_username }}
password = {{ airflow_atlas_password }}

[operators]
# The default owner assigned to each new operator, unless
# provided explicitly or passed via ``default_args``
default_owner = {{ airflow_operator_default_owner }}
default_cpus = {{ airflow_operator_default_cpus }}
default_ram = {{ airflow_operator_default_ram }}
default_disk = {{ airflow_operator_default_disk }}
default_gpus = {{ airflow_operator_default_gpus }}

# Default queue that tasks get assigned to and that worker listen on.
default_queue = {{ airflow_default_queue }}

# Is allowed to pass additional/unused arguments (args, kwargs) to the BaseOperator operator.
# If set to False, an exception will be thrown, otherwise only the console message will be displayed.
allow_illegal_arguments = {{ airflow_allow_illegal_arguments }}

[hive]
# Default mapreduce queue for HiveOperator tasks
default_hive_mapred_queue = {{ airflow_default_hive_mapred_queue }}

# Template for mapred_job_name in HiveOperator, supports the following named parameters
# hostname, dag_id, task_id, execution_date
{% if airflow_mapred_job_name_template %}mapred_job_name_template = {{ airflow_mapred_job_name_template }}{% endif %}

[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = {{ airflow_webserver_base_url }}

# Default timezone to display all dates in the UI, can be UTC, system, or
# any IANA timezone string (e.g. Europe/Amsterdam). If left empty the
# default value of core/default_timezone will be used
# Example: default_ui_timezone = America/New_York
default_ui_timezone = {{ airflow_webserver_default_ui_timezone }}

# The ip specified when starting the web server
web_server_host = {{ airflow_webserver_host }}

# The port on which to run the web server
web_server_port = {{ airflow_webserver_port }}

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
web_server_ssl_cert = {{ airflow_webserver_ssl_cert }}

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
web_server_ssl_key = {{ airflow_webserver_ssl_key }}

# Number of seconds the webserver waits before killing gunicorn master that doesn't respond
web_server_master_timeout = {{ airflow_webserver_master_timeout }}

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = {{ airflow_webserver_worker_timeout }}

# Number of workers to refresh at a time. When set to 0, worker refresh is
# disabled. When nonzero, airflow periodically refreshes webserver workers by
# bringing up new ones and killing old ones.
worker_refresh_batch_size = {{ airflow_webserver_worker_refresh_batch_size }}

# Number of seconds to wait before refreshing a batch of workers.
worker_refresh_interval = {{ airflow_webserver_worker_refresh_interval }}

# If set to True, Airflow will track files in plugins_folder directory. When it detects changes,
# then reload the gunicorn.
reload_on_plugin_change = {{ airflow_webserver_reload_on_plugin_change }}

# Secret key used to run your flask app. It should be as random as possible. However, when running
# more than 1 instances of webserver, make sure all of them use the same ``secret_key`` otherwise
# one of them will error with "CSRF session token is missing".
secret_key = {{ airflow_webserver_secret_key }}

# Number of workers to run the Gunicorn web server
workers = {{ airflow_webserver_workers }}

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = {{ airflow_webserver_worker_class }}

# Log files for the gunicorn webserver. '-' means log to stderr.
access_logfile = {{ airflow_webserver_access_logfile }}

# Log files for the gunicorn webserver. '-' means log to stderr.
error_logfile = {{ airflow_webserver_error_logfile }}

# Access log format for gunicorn webserver.
# default format is %%(h)s %%(l)s %%(u)s %%(t)s "%%(r)s" %%(s)s %%(b)s "%%(f)s" "%%(a)s"
# documentation - https://docs.gunicorn.org/en/stable/settings.html#access-log-format
access_logformat = {% if airflow_webserver_access_logformat %}{{ airflow_webserver_access_logformat }}{% endif %}

# Expose the configuration file in the web server
expose_config = {{ airflow_webserver_expose_config }}

# Expose hostname in the web server
expose_hostname = {{ airflow_webserver_expose_hostname }}

# Expose stacktrace in the web server
expose_stacktrace = {{ airflow_webserver_expose_stacktrace }}

# Default DAG view. Valid values are: ``tree``, ``graph``, ``duration``, ``gantt``, ``landing_times``
dag_default_view = {{ airflow_webserver_dag_default_view }}

# Default DAG orientation. Valid values are:
# ``LR`` (Left->Right), ``TB`` (Top->Bottom), ``RL`` (Right->Left), ``BT`` (Bottom->Top)
dag_orientation = {{ airflow_webserver_dag_orientation }}

# The amount of time (in secs) webserver will wait for initial handshake
# while fetching logs from other worker machine
log_fetch_timeout_sec = {{ airflow_webserver_log_fetch_timeout_sec }}

# Time interval (in secs) to wait before next log fetching.
log_fetch_delay_sec = {{ airflow_webserver_log_fetch_delay_sec }}

# Distance away from page bottom to enable auto tailing.
log_auto_tailing_offset = {{ airflow_webserver_log_auto_tailing_offset }}

# Animation speed for auto tailing log display.
log_animation_speed = {{ airflow_webserver_log_animation_speed }}

# By default, the webserver shows paused DAGs. Flip this to hide paused
# DAGs by default
hide_paused_dags_by_default = {{ airflow_webserver_hide_paused_dags_by_default }}

# Consistent page size across all listing views in the UI
page_size = {{ airflow_webserver_page_size }}

# Define the color of navigation bar
navbar_color = {{ airflow_webserver_navbar_color_v2 }}

# Default dagrun to show in UI
default_dag_run_display_number = {{ airflow_webserver_default_dag_run_display_number }}

# Enable werkzeug ``ProxyFix`` middleware for reverse proxy
enable_proxy_fix = {{ airflow_webserver_enable_proxy_fix }}

# Number of values to trust for ``X-Forwarded-For``.
# More info: https://werkzeug.palletsprojects.com/en/0.16.x/middleware/proxy_fix/
proxy_fix_x_for = {{ airflow_webserver_proxy_fix_x_for }}

# Number of values to trust for ``X-Forwarded-Proto``
proxy_fix_x_proto = {{ airflow_webserver_proxy_fix_x_proto }}

# Number of values to trust for ``X-Forwarded-Host``
proxy_fix_x_host = {{ airflow_webserver_proxy_fix_x_host }}

# Number of values to trust for ``X-Forwarded-Port``
proxy_fix_x_port = {{ airflow_webserver_proxy_fix_x_port }}

# Number of values to trust for ``X-Forwarded-Prefix``
proxy_fix_x_prefix = {{ airflow_webserver_proxy_fix_x_prefix }}

# Set secure flag on session cookie
cookie_secure = {{ airflow_webserver_cookie_secure }}

# Set samesite policy on session cookie
cookie_samesite = {{ airflow_webserver_cookie_samesite }}

# Default setting for wrap toggle on DAG code and TI log views.
default_wrap = {{ airflow_webserver_default_wrap }}

# Allow the UI to be rendered in a frame
x_frame_enabled = {{ airflow_webserver_x_frame_enabled }}

# Send anonymous user activity to your analytics tool
# choose from google_analytics, segment, or metarouter
{% if airflow_webserver_analytics_tool %}analytics_tool = {{ airflow_webserver_analytics_tool }}{% endif %}

# Unique ID of your account in the analytics tool
{% if airflow_webserver_analytics_id %}analytics_id = {{ airflow_webserver_analytics_id }}{% endif %}

# 'Recent Tasks' stats will show for old DagRuns if set
show_recent_stats_for_completed_runs = {{ airflow_webserver_show_recent_stats_for_completed_runs }}

# Update FAB permissions and sync security manager roles
# on webserver startup
update_fab_perms = {{ airflow_webserver_update_fab_perms }}

# The UI cookie lifetime in minutes. User will be logged out from UI after
# ``session_lifetime_minutes`` of non-activity
session_lifetime_minutes = {{ airflow_webserver_session_lifetime_minutes }}

# Sets a custom page title for the DAGs overview page and site title for all pages
# instance_name = 
{% if airflow_instance_name is defined %}instance_name = {{ airflow_instance_name }}{% endif %}

[email]

# Configuration email backend and whether to
# send email alerts on retry or failure
# Email backend to use
email_backend = {{ airflow_email_backend }}

# Email connection to use
email_conn_id = {{ airflow_email_conn_id }}

# Whether email alerts should be sent when a task is retried
default_email_on_retry = {{ airflow_email_default_email_on_retry }}

# Whether email alerts should be sent when a task failed
default_email_on_failure = {{ airflow_email_default_email_on_failure }}

# File that will be used as the template for Email subject (which will be rendered using Jinja2).
# If not set, Airflow uses a base template.
# Example: subject_template = /path/to/my_subject_template_file
{% if airflow_email_subject_template %}subject_template = {{ airflow_email_subject_template }}{% endif %}

# File that will be used as the template for Email content (which will be rendered using Jinja2).
# If not set, Airflow uses a base template.
# Example: html_content_template = /path/to/my_html_content_template_file
{% if airflow_email_html_content_template %}html_content_template = {{ airflow_email_html_content_template }}{% endif %}

[smtp]

# If you want airflow to send emails on retries, failure, and you want to use
# the airflow.utils.email.send_email_smtp function, you have to configure an
# smtp server here
smtp_host = {{ airflow_smtp_host }}
smtp_starttls = {{ airflow_smtp_starttls }}
smtp_ssl = {{ airflow_smtp_ssl }}
smtp_port = {{ airflow_smtp_port }}
smtp_mail_from = {{ airflow_smtp_mail_from }}
smtp_timeout = {{ airflow_smtp_timeout }}
smtp_retry_limit = {{ airflow_smtp_retry_limit }}
{% if airflow_smtp_user %}
smtp_user = {{ airflow_smtp_user }}
{% endif %}
{% if airflow_smtp_passwd %}
smtp_password = {{ airflow_smtp_passwd }}
{% endif %}

[sentry]

# Sentry (https://docs.sentry.io) integration. Here you can supply
# additional configuration options based on the Python platform. See:
# https://docs.sentry.io/error-reporting/configuration/?platform=python.
# Unsupported options: ``integrations``, ``in_app_include``, ``in_app_exclude``,
# ``ignore_errors``, ``before_breadcrumb``, ``before_send``, ``transport``.
# Enable error reporting to Sentry
sentry_on = {{ airflow_sentry_on }}
sentry_dsn =

[celery_kubernetes_executor]

# This section only applies if you are using the ``CeleryKubernetesExecutor`` in
# ``[core]`` section above
# Define when to send a task to ``KubernetesExecutor`` when using ``CeleryKubernetesExecutor``.
# When the queue of a task is the value of ``kubernetes_queue`` (default ``kubernetes``),
# the task is executed via ``KubernetesExecutor``,
# otherwise via ``CeleryExecutor``
kubernetes_queue = kubernetes

[celery]

# This section only applies if you are using the CeleryExecutor in
# ``[core]`` section above
# The app name that will be used by celery
celery_app_name = {{ airflow_celery_app_name }}

# The concurrency that will be used when starting workers with the
# ``airflow celery worker`` command. This defines the number of task instances that
# a worker will take, so size up your workers based on the resources on
# your worker box and the nature of your tasks
worker_concurrency = {{ airflow_celery_concurrency }}

# The maximum and minimum concurrency that will be used when starting workers with the
# ``airflow celery worker`` command (always keep minimum processes, but grow
# to maximum if necessary). Note the value should be max_concurrency,min_concurrency
# Pick these numbers based on resources on worker box and the nature of the task.
# If autoscale option is available, worker_concurrency will be ignored.
# http://docs.celeryproject.org/en/latest/reference/celery.bin.worker.html#cmdoption-celery-worker-autoscale
# Example: worker_autoscale = 16,12
{% if airflow_celery_worker_autoscale %}worker_autoscale = {{ airflow_celery_worker_autoscale }}{% endif %}

# Used to increase the number of tasks that a worker prefetches which can improve performance.
# The number of processes multiplied by worker_prefetch_multiplier is the number of tasks
# that are prefetched by a worker. A value greater than 1 can result in tasks being unnecessarily
# blocked if there are multiple workers and one worker prefetches tasks that sit behind long
# running tasks while another worker has unutilized processes that are unable to process the already
# claimed blocked tasks.
# https://docs.celeryproject.org/en/stable/userguide/optimizing.html#prefetch-limits
# Example: worker_prefetch_multiplier = 1
{% if airflow_celery_worker_prefetch_multiplier %}worker_prefetch_multiplier = {{ airflow_celery_worker_prefetch_multiplier }}{% endif %}

# When you start an airflow worker, airflow starts a tiny web server
# subprocess to serve the workers local log files to the airflow main
# web server, who then builds pages and sends them to users. This defines
# the port on which the logs are served. It needs to be unused, and open
# visible from the main web server to connect into the workers.
worker_log_server_port = {{ airflow_celery_worker_log_server_port }}

# Umask that will be used when starting workers with the ``airflow celery worker``
# in daemon mode. This control the file-creation mode mask which determines the initial
# value of file permission bits for newly created files.
worker_umask = {{ airflow_celery_worker_umask }}

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more information.
broker_url = {{ airflow_celery_broker_url }}

# The Celery result_backend. When a job finishes, it needs to update the
# metadata of the job. Therefore it will post a message on a message bus,
# or insert it into a database (depending of the backend)
# This status is used by the scheduler to update the state of the task
# The use of a database is highly recommended
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-result-backend-settings
result_backend = {{ airflow_celery_result_backend }}

# Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
# it ``airflow celery flower``. This defines the IP that Celery Flower runs on
flower_host = {{ airflow_flower_host }}

# The root URL for Flower
# Example: flower_url_prefix = /flower
flower_url_prefix = {{ airflow_flower_url_prefix }}

# This defines the port that Celery Flower runs on
flower_port = {{ airflow_flower_port }}

# Securing Flower with Basic Authentication
# Accepts user:password pairs separated by a comma
# Example: flower_basic_auth = user1:password1,user2:password2
flower_basic_auth = {{ airflow_flower_basic_auth }}

# How many processes CeleryExecutor uses to sync task state.
# 0 means to use max(1, number of cores - 1) processes.
sync_parallelism = {{ airflow_celery_sync_parallelism }}

# Import path for celery configuration options
celery_config_options = {{ airflow_celery_config_options }}
ssl_active = {{ airflow_celery_ssl_active }}
ssl_key = {{ airflow_celery_ssl_key }}
ssl_cert = {{ airflow_celery_ssl_cert }}
ssl_cacert = {{ airflow_celery_ssl_cacert }}

# Celery Pool implementation.
# Choices include: ``prefork`` (default), ``eventlet``, ``gevent`` or ``solo``.
# See:
# https://docs.celeryproject.org/en/latest/userguide/workers.html#concurrency
# https://docs.celeryproject.org/en/latest/userguide/concurrency/eventlet.html
pool = {{ airflow_celery_pool }}

# The number of seconds to wait before timing out ``send_task_to_executor`` or
# ``fetch_celery_task_state`` operations.
operation_timeout = {{ airflow_celery_operation_timeout }}

# Celery task will report its status as 'started' when the task is executed by a worker.
# This is used in Airflow to keep track of the running tasks and if a Scheduler is restarted
# or run in HA mode, it can adopt the orphan tasks launched by previous SchedulerJob.
task_track_started = {{ airflow_celery_task_track_started }}

# Time in seconds after which Adopted tasks are cleared by CeleryExecutor. This is helpful to clear
# stalled tasks.
task_adoption_timeout = {{ airflow_celery_task_adoption_timeout }}

# The Maximum number of retries for publishing task messages to the broker when failing
# due to ``AirflowTaskTimeout`` error before giving up and marking Task as failed.
task_publish_max_retries = {{ airflow_celery_task_publish_max_retries }}

# Worker initialisation check to validate Metadata Database connection
worker_precheck = {{ airflow_celery_worker_precheck }}

[celery_broker_transport_options]

# This section is for specifying options which can be passed to the
# underlying celery broker transport. See:
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-broker_transport_options
# The visibility timeout defines the number of seconds to wait for the worker
# to acknowledge the task before the message is redelivered to another worker.
# Make sure to increase the visibility timeout to match the time of the longest
# ETA you're planning to use.
# visibility_timeout is only supported for Redis and SQS celery brokers.
# See:
# http://docs.celeryproject.org/en/master/userguide/configuration.html#std:setting-broker_transport_options
# Example: visibility_timeout = 21600
{% if airflow_celery_broker_visibility_timeout %}visibility_timeout = {{ airflow_celery_broker_visibility_timeout }}{% endif %}

[dask]
{% if airflow_executor == "DaskExecutor" %}
# This section only applies if you are using the DaskExecutor in
# [core] section above
# The IP address and port of the Dask cluster's scheduler.
cluster_address = {{ airflow_dask_cluster_address }}

# TLS/ SSL settings to access a secured Dask scheduler.
tls_ca = {{ airflow_dask_tls_ca }}
tls_cert = {{ airflow_dask_tls_cert }}
tls_key = {{ airflow_dask_tls_key }}
{% endif %}

[scheduler]
# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
job_heartbeat_sec = {{ airflow_scheduler_job_heartbeat_sec }}

# How often (in seconds) to check and tidy up 'running' TaskInstancess
# that no longer have a matching DagRun
clean_tis_without_dagrun_interval = {{ airflow_scheduler_clean_tis_without_dagrun_interval }}

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
scheduler_heartbeat_sec = {{ airflow_scheduler_heartbeat_sec }}

# The number of times to try to schedule each DAG file
# -1 indicates unlimited number
num_runs = {{ airflow_scheduler_num_runs }}

# The number of seconds to wait between consecutive DAG file processing
processor_poll_interval = {{ airflow_scheduler_processor_poll_interval }}

# Number of seconds after which a DAG file is parsed. The DAG file is parsed every
# ``min_file_process_interval`` number of seconds. Updates to DAGs are reflected after
# this interval. Keeping this number low will increase CPU usage.
min_file_process_interval = {{ airflow_scheduler_min_file_process_interval }}

# How often (in seconds) to scan the DAGs directory for new files. Default to 5 minutes.
dag_dir_list_interval = {{ airflow_scheduler_dag_dir_list_interval }}

# How often should stats be printed to the logs. Setting to 0 will disable printing stats
print_stats_interval = {{ airflow_scheduler_print_stats_interval }}

# How often (in seconds) should pool usage stats be sent to statsd (if statsd_on is enabled)
pool_metrics_interval = {{ airflow_scheduler_pool_metrics_interval }}

# If the last scheduler heartbeat happened more than scheduler_health_check_threshold
# ago (in seconds), scheduler is considered unhealthy.
# This is used by the health check in the "/health" endpoint
scheduler_health_check_threshold = {{ airflow_scheduler_scheduler_health_check_threshold }}

# How often (in seconds) should the scheduler check for orphaned tasks and SchedulerJobs
orphaned_tasks_check_interval = {{ airflow_scheduler_orphaned_tasks_check_interval }}
child_process_log_directory = {{ airflow_child_process_log_folder }}

# Local task jobs periodically heartbeat to the DB. If the job has
# not heartbeat in this many seconds, the scheduler will mark the
# associated task instance as failed and will re-schedule the task.
scheduler_zombie_task_threshold = {{ airflow_scheduler_zombie_task_threshold }}

# Turn off scheduler catchup by setting this to ``False``.
# Default behavior is unchanged and
# Command Line Backfills still work, but the scheduler
# will not do scheduler catchup if this is ``False``,
# however it can be set on a per DAG basis in the
# DAG definition (catchup)
catchup_by_default = {{ airflow_scheduler_catchup_by_default }}

# This changes the batch size of queries in the scheduling main loop.
# If this is too high, SQL query performance may be impacted by one
# or more of the following:
# - reversion to full table scan
# - complexity of query predicate
# - excessive locking
# Additionally, you may hit the maximum allowable query length for your db.
# Set this to 0 for no limit (not advised)
max_tis_per_query = {{ airflow_scheduler_max_tis_per_query }}

# Should the scheduler issue ``SELECT ... FOR UPDATE`` in relevant queries.
# If this is set to False then you should not run more than a single
# scheduler at once
use_row_level_locking = {{ airflow_scheduler_use_row_level_locking }}

# Max number of DAGs to create DagRuns for per scheduler loop
#
# Default: 10
max_dagruns_to_create_per_loop = {{ airflow_scheduler_max_dagruns_to_create_per_loop }}

# How many DagRuns should a scheduler examine (and lock) when scheduling
# and queuing tasks.
#
# Default: 20
max_dagruns_per_loop_to_schedule = {{ airflow_scheduler_max_dagruns_per_loop_to_schedule }}

# Should the Task supervisor process perform a "mini scheduler" to attempt to schedule more tasks of the
# same DAG. Leaving this on will mean tasks in the same DAG execute quicker, but might starve out other
# dags in some circumstances
#
# Default: True
schedule_after_task_execution = {{ airflow_scheduler_schedule_after_task_execution }}

# The scheduler can run multiple processes in parallel to parse dags.
# This defines how many processes will run.
parsing_processes = {{ airflow_scheduler_parsing_processes }}

# One of ``modified_time``, ``random_seeded_by_host`` and ``alphabetical``.
# The scheduler will list and sort the dag files to decide the parsing order.
#
# * ``modified_time``: Sort by modified time of the files. This is useful on large scale to parse the
#   recently modified DAGs first.
# * ``random_seeded_by_host``: Sort randomly across multiple Schedulers but with same order on the
#   same host. This is useful when running with Scheduler in HA mode where each scheduler can
#   parse different DAG files.
# * ``alphabetical``: Sort by filename
file_parsing_sort_mode = {{ airflow_file_parsing_sort_mode }}

# Turn off scheduler use of cron intervals by setting this to False.
# DAGs submitted manually in the web UI or with trigger_dag will still run.
use_job_schedule = {{ airflow_scheduler_use_job_schedule }}

# Allow externally triggered DagRuns for Execution Dates in the future
# Only has effect if schedule_interval is set to None in DAG
allow_trigger_in_future = {{ airflow_scheduler_allow_trigger_in_future }}

# DAG dependency detector class to use
dependency_detector = {{ airflow_dependency_detector }}

[kerberos]
ccache = {{ airflow_kerberos_ccache }}

# gets augmented with fqdn
principal = {{ airflow_kerberos_principal }}
reinit_frequency = {{ airflow_kerberos_reinit_frequency }}
kinit_path = {{ airflow_kerberos_kinit_path }}
keytab = {{ airflow_kerberos_keytab }}

[github_enterprise]
api_rev = {{ airflow_github_enterprise_api_rev }}

[elasticsearch]
# Elasticsearch host
host = {{ airflow_elasticsearch_host }}

# Format of the log_id, which is used to query for a given tasks logs
log_id_template = {{ airflow_elasticsearch_log_id_template }}

# Used to mark the end of a log stream for a task
end_of_log_mark = {{ airflow_elasticsearch_end_of_log_mark }}

# Qualified URL for an elasticsearch frontend (like Kibana) with a template argument for log_id
# Code will construct log_id using the log_id template from the argument above.
# NOTE: The code will prefix the https:// automatically, don't include that here.
frontend = {{ airflow_elasticsearch_frontend }}

# Write the task logs to the stdout of the worker, rather than the default files
write_stdout = {{ airflow_elasticsearch_write_stdout }}

# Instead of the default log formatter, write the log lines as JSON
json_format = {{ airflow_elasticsearch_json_format }}

# Log fields to also attach to the json output, if enabled
json_fields = {{ airflow_elasticsearch_json_fields }}

# The field where host name is stored (normally either `host` or `host.name`)
host_field = {{ airflow_host_field }}

# The field where offset is stored (normally either `offset` or `log.offset`)
offset_field = {{ airflow_offset_field }}

[elasticsearch_configs]
use_ssl = {{ airflow_elasticsearch_configs_use_ssl }}
verify_certs = {{ airflow_elasticsearch_configs_verify_certs }}

[kubernetes]
# Path to the YAML pod file. If set, all other kubernetes-related fields are ignored.
pod_template_file = {{ airflow_kubernetes_pod_template_file }}

# The repository of the Kubernetes Image for the Worker to Run
worker_container_repository = {{ airflow_kubernetes_worker_container_repository }}

# The tag of the Kubernetes Image for the Worker to Run
worker_container_tag = {{ airflow_kubernetes_worker_container_tag }}

# The Kubernetes namespace where airflow workers should be created. Defaults to ``default``
namespace = {{ airflow_kubernetes_namespace }}

# If True, all worker pods will be deleted upon termination
delete_worker_pods = {{ airflow_kubernetes_delete_worker_pods }}

# If False (and delete_worker_pods is True),
# failed worker pods will not be deleted so users can investigate them.
# This only prevents removal of worker pods where the worker itself failed,
# not when the task it ran failed.
delete_worker_pods_on_failure = {{ airlfow_kubernetes_delete_worker_pods_on_failure }}

# Number of Kubernetes Worker Pod creation calls per scheduler loop.
# Note that the current default of "1" will only launch a single pod
# per-heartbeat. It is HIGHLY recommended that users increase this
# number to match the tolerance of their kubernetes cluster for
# better performance.
worker_pods_creation_batch_size = {{ airflow_kubernetes_worker_pods_creation_batch_size }}

# Allows users to launch pods in multiple namespaces.
# Will require creating a cluster-role for the scheduler
multi_namespace_mode = {{ airflow_kubernetes_multi_namespace_mode }}

# Use the service account kubernetes gives to pods to connect to kubernetes cluster.
# It's intended for clients that expect to be running inside a pod running on kubernetes.
# It will raise an exception if called from a process not running in a kubernetes environment.
in_cluster = {{ airflow_kubernetes_in_cluster }}

# When running with in_cluster=False change the default cluster_context or config_file
# options to Kubernetes client. Leave blank these to use default behaviour like ``kubectl`` has.
{% if airflow_kubernetes_cluster_context %}cluster_context = {{ airflow_kubernetes_cluster_context }}{% endif %}

# Path to the kubernetes configfile to be used when ``in_cluster`` is set to False
{% if airflow_kubernetes_config_file %}config_file = {{ airflow_kubernetes_config_file }}{% endif %}

# Keyword parameters to pass while calling a kubernetes client core_v1_api methods
# from Kubernetes Executor provided as a single line formatted JSON dictionary string.
# List of supported params are similar for all core_v1_apis, hence a single config
# variable for all apis. See:
# https://raw.githubusercontent.com/kubernetes-client/python/41f11a09995efcd0142e25946adc7591431bfb2f/kubernetes/client/api/core_v1_api.py
kube_client_request_args = {{ airflow_kubernetes_kube_client_request_args }}

# Optional keyword arguments to pass to the ``delete_namespaced_pod`` kubernetes client
# ``core_v1_api`` method when using the Kubernetes Executor.
# This should be an object and can contain any of the options listed in the ``v1DeleteOptions``
# class defined here:
# https://github.com/kubernetes-client/python/blob/41f11a09995efcd0142e25946adc7591431bfb2f/kubernetes/client/models/v1_delete_options.py#L19
delete_option_kwargs = {{ airflow_kubernetes_delete_option_kwargs }}

# Enables TCP keepalive mechanism. This prevents Kubernetes API requests to hang indefinitely
# when idle connection is time-outed on services like cloud load balancers or firewalls.
enable_tcp_keepalive = {{ airflow_kubernetes_enable_tcp_keepalive }}

# When the `enable_tcp_keepalive` option is enabled, TCP probes a connection that has
# been idle for `tcp_keep_idle` seconds.
tcp_keep_idle = {% if airflow_kubernetes_enable_tcp_keepalive == True %}{{ airflow_kubernetes_tcp_keep_idle }}{% endif %}

# When the `enable_tcp_keepalive` option is enabled, if Kubernetes API does not respond
# to a keepalive probe, TCP retransmits the probe after `tcp_keep_intvl` seconds.
tcp_keep_intvl = {{ airflow_kubernetes_tcp_keep_intvl }}

# When the `enable_tcp_keepalive` option is enabled, if Kubernetes API does not respond
# to a keepalive probe, TCP retransmits the probe `tcp_keep_cnt number` of times before
# a connection is considered to be broken.
tcp_keep_cnt = {{ airflow_kubernetes_tcp_keep_cnt }}

# Set this to false to skip verifying SSL certificate of Kubernetes python client.
verify_ssl = {{ airflow_verify_ssl }}

# How long in seconds a worker can be in Pending before it is considered a failure
worker_pods_pending_timeout = {{ airflow_worker_pods_pending_timeout }}

# How often in seconds to check if Pending workers have exceeded their timeouts
worker_pods_pending_timeout_check_interval = {{ airflow_worker_pods_pending_timeout_check_interval }}

# How many pending pods to check for timeout violations in each check interval.
# You may want this higher if you have a very large cluster and/or use ``multi_namespace_mode``.
worker_pods_pending_timeout_batch_size = {{ airflow_worker_pods_pending_timeout_batch_size }}

[smart_sensor]
# When `use_smart_sensor` is True, Airflow redirects multiple qualified sensor tasks to
# smart sensor task.
use_smart_sensor = {{ airflow_use_smart_sensor }}

# `shard_code_upper_limit` is the upper limit of `shard_code` value. The `shard_code` is generated
# by `hashcode % shard_code_upper_limit`.
shard_code_upper_limit = {{ airflow_shard_code_upper_limit }}

# The number of running smart sensor processes for each service.
shards = {{ airflow_shards }}

# comma separated sensor classes support in smart_sensor.
sensors_enabled = {{ airflow_sensors_enabled }}
